module LoanWorkflowWithRepayment where

import DA.Foldable as FO
import ReverseSortedList as RSV

-- Helper function to calculate the total of tokens, ignoring signs
tokenValue : ReverseSortedList Token -> Decimal
tokenValue = FO.sum . fmap (.value)

template Token
  with
    value : Decimal
    owner : Party
  where
    signatory owner

instance Ord Token where
  x `compare` y = x.value `compare` y.value

template LoanLimit
  with
    amount : Decimal
    bank : Party
  where
    signatory bank
    ensure amount > 0.0
    key bank : Party
    maintainer key

template RepaymentRestriction
  with
    minimumAmount : Decimal
    bank : Party
    borrower : Party
  where
    signatory bank
    observer borrower
    ensure minimumAmount > 0.0 && bank /= borrower
    key (bank, borrower) : (Party, Party)
    maintainer key._1

template Loan
  with
    bank : Party
    borrower : Party
    approvedAmount : Decimal
    disbursementTotal : ReverseSortedList Token
  where
    signatory bank, borrower
    ensure approvedAmount > 0.0 && bank /= borrower && tokenValue disbursementTotal <= approvedAmount

    choice Disburse : ContractId Loan
      with
        amount : Decimal
        actor : Party
      controller actor
      do
        assertMsg "Actor must be either be the borrower or the bank" (actor `FO.elem` [borrower, bank])
        assertMsg "Must disburse greater than zero" (amount > 0.0)
        assertMsg "Cannot disburse greater than approved amount" (amount <= approvedAmount)

        let newApprovedAmount = approvedAmount - amount
        let disbursement = Token with value = amount; owner = borrower
        let newDisbursementTotal = disbursement `RSV.cons` disbursementTotal

        create disbursement
        create this with disbursementTotal = newDisbursementTotal; approvedAmount = newApprovedAmount

    choice Repay : ContractId Loan
      with
        amount : Decimal
      controller borrower
      do
        assertMsg "Repayment amount must be greater than zero" (amount > 0.0)

        (_, repaymentRestriction) <- fetchByKey @RepaymentRestriction (bank, borrower)
        assertMsg "Repayment amount must be greater than minimum amount specified in repayment restriction" (amount > repaymentRestriction.minimumAmount)

        undefined
    
template LoanRequest
  with
    bank : Party
    borrower : Party
    amount : Decimal
  where
    signatory borrower
    observer bank
    ensure amount > 0.0 && bank /= borrower

    choice ApproveRequest : ContractId Loan
      controller bank
      do
        (loanLimitCid, loanLimit) <- fetchByKey @LoanLimit bank
        
        assertMsg "Cannot loan more than loan limit" (amount <= loanLimit.amount)

        let newLimit = loanLimit.amount - amount
        archive loanLimitCid
        create LoanLimit with amount = newLimit, ..

        create Loan with disbursementTotal = empty; approvedAmount = amount; ..
