module LoanWorkflowWithRepayment where

import DA.Foldable as F
import DA.List as L
import DA.Map as M
import DA.Map.Extra as ME
import DA.Traversable as T
import DA.Tuple as Tu

-- Helper function to calculate the total of tokens, ignoring signs
tokenValue : [Token] -> Decimal
tokenValue = F.sum . fmap (.value)

-- Helper function to calculate the tokens required to repay a specified amount
getTokensForRepayment : Decimal -> Map (ContractId Token) Token -> Map (ContractId Token) Token
getTokensForRepayment repaymentAmount tokenMap =
  let (greaterThanOrEqualToRepaymentAmount, lessThanRepaymentAmount) = 
        ME.partition ((>= repaymentAmount) . (.value)) tokenMap
  in
    if not $ M.null greaterThanOrEqualToRepaymentAmount
    then ME.head greaterThanOrEqualToRepaymentAmount
    else
        let folder k v (out, acc) = 
              if acc - v.value < 0.0
              then (M.insert k v out , acc - v.value)
              else (out, 0.0)
        in  fst $ ME.foldrWithKey folder (M.empty, repaymentAmount) lessThanRepaymentAmount

-- Helper function to fetch all Token contracts from a list of ContractIds
getDisbursements : HasFetch a => [ContractId a] -> Update [a]
getDisbursements = T.mapA fetch

getDisbursementMap : HasFetch a => [ContractId a] -> Update (Map (ContractId a) a)
getDisbursementMap contractIds =
  M.fromList <$> T.mapA (T.mapA fetch) dupes
    where dupes = fmap Tu.dupe contractIds

template Token
  with
    value : Decimal
    minter : Party
    owner : Party
    shouldArchive : Bool
  where
    signatory minter
    observer owner

template LoanLimit
  with
    amount : Decimal
    bank : Party
  where
    signatory bank
    ensure amount > 0.0
    key bank : Party
    maintainer key

template RepaymentRestriction
  with
    minimumAmount : Decimal
    bank : Party
    borrower : Party
  where
    signatory bank
    observer borrower
    ensure minimumAmount > 0.0 && bank /= borrower
    key (bank, borrower) : (Party, Party)
    maintainer key._1

template Loan
  with
    bank : Party
    borrower : Party
    approvedAmount : Decimal
    disbursementCids : [ContractId Token]
  where
    signatory bank, borrower
    ensure approvedAmount > 0.0 && bank /= borrower

    choice Disburse : ContractId Loan
      with
        amount : Decimal
        actor : Party
      controller actor
      do
        assertMsg "Actor must be either be the borrower or the bank" (actor `L.elem` [borrower, bank])
        assertMsg "Must disburse greater than zero" (amount > 0.0)
        assertMsg "Cannot disburse greater than approved amount" (amount <= approvedAmount)

        existingDisbursements <- getDisbursements disbursementCids

        let newDisbursement = Token with value = amount; minter = bank; owner = borrower; shouldArchive = False
            newDisbursementTotal = tokenValue (newDisbursement :: existingDisbursements)

        assertMsg "New disbursement total exceeds approved amount" (newDisbursementTotal <= approvedAmount)

        newDisbursementCid <- create newDisbursement
        let newDisbursementCids = newDisbursementCid :: disbursementCids

        create this with disbursementCids = newDisbursementCids

    choice Repay : ContractId Loan
      with
        amount : Decimal
      controller borrower
      do
        assertMsg "Repayment amount must be greater than zero" (amount > 0.0)

        (_, repaymentRestriction) <- fetchByKey @RepaymentRestriction (bank, borrower)
        assertMsg "Repayment amount must be greater than minimum amount specified in repayment restriction" (amount > repaymentRestriction.minimumAmount)

        existingDisbursements <- getDisbursementMap disbursementCids
        let repaymentTokens = getTokensForRepayment amount existingDisbursements

        let newDisbursementKeys = disbursementCids \\ keys repaymentTokens
        -- let newApprovedAmount
        -- mapA_ archive $ keys repaymentTokens

        undefined
    
template LoanRequest
  with
    bank : Party
    borrower : Party
    amount : Decimal
  where
    signatory borrower
    observer bank
    ensure amount > 0.0 && bank /= borrower

    choice ApproveRequest : ContractId Loan
      controller bank
      do
        (loanLimitCid, loanLimit) <- fetchByKey @LoanLimit bank
        
        assertMsg "Cannot loan more than loan limit" (amount <= loanLimit.amount)

        let newLimit = loanLimit.amount - amount
        archive loanLimitCid
        create LoanLimit with amount = newLimit, ..

        create Loan with disbursementCids = []; approvedAmount = amount; ..
