module LoanApprovalWorkflowTests where

import LoanApprovalWorkflow
import DA.Assert
import DA.Functor
import DA.Optional
import Daml.Script

allocateParties : [Text] -> Script [Party]
allocateParties = mapA allocateParty

test_BorrowerCanCreateLoanRequest : Script ()
test_BorrowerCanCreateLoanRequest = do
    let amount = 100.0
    [borrower, bank] <- allocateParties ["borrower", "bank"]

    void $ borrower `submit` createCmd LoanRequest with ..

test_BorrowerCannotCreateLoanRequestWithBankFieldEqualsToBorrower : Script ()
test_BorrowerCannotCreateLoanRequestWithBankFieldEqualsToBorrower = do
    let amount = 100.0
    borrower <- allocateParty "borrower"

    void $ borrower `submitMustFail` createCmd LoanRequest with bank = borrower; borrower; ..

test_BankCanApproveLoanRequest : Script ()
test_BankCanApproveLoanRequest = do
    let amount = 100.0
    [borrower, bank] <- allocateParties ["borrower", "bank"]

    loanRequest <- borrower `submit` createCmd LoanRequest with ..

    void $ bank `submit` exerciseCmd loanRequest ApproveRequest

test_BankCanFetchApproveedLoanWithExpectedAmount : Script ()
test_BankCanFetchApproveedLoanWithExpectedAmount = do
    let expected = 100.0
    [borrower, bank] <- allocateParties ["borrower", "bank"]

    loanRequest <- borrower `submit` createCmd LoanRequest with amount = expected; ..

    loanCid <- bank `submit` exerciseCmd loanRequest ApproveRequest

    Some loan <- bank `queryContractId` loanCid

    expected === loan.amount

test_LoanRequestArchivedAfterApproval : Script ()
test_LoanRequestArchivedAfterApproval = do
    let amount = 100.0
    [borrower, bank] <- allocateParties ["borrower", "bank"]

    loanRequest <- borrower `submit` createCmd LoanRequest with ..

    void $ bank `submit` exerciseCmd loanRequest ApproveRequest

    loanRequests <- query @LoanRequest borrower

    loanRequests === []

test_ApprovedLoanHasExpectedBorrowerAndBank : Script ()
test_ApprovedLoanHasExpectedBorrowerAndBank = do
    let amount = 100.0
    [borrower, bank] <- allocateParties ["borrower", "bank"]

    loanRequest <- borrower `submit` createCmd LoanRequest with ..

    loanContractId <- bank `submit` exerciseCmd loanRequest ApproveRequest

    fromBanksPerspective <- bank `queryContractId` loanContractId
    assert $ isSome fromBanksPerspective

    fromBorrowersPerspective <- borrower `queryContractId` loanContractId
    assert $ isSome fromBorrowersPerspective

    fromBanksPerspective === fromBorrowersPerspective

    let (Some contract) = fromBanksPerspective
    contract.bank === bank
    contract.borrower === borrower
