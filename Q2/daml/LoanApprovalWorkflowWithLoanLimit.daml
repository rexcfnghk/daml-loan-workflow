module LoanApprovalWorkflowWithLoanLimit where

-- Helper function to calculate the total of tokens, ignoring signs
tokenValue : [Token] -> Decimal
tokenValue = sum . fmap (abs . (.value))

template Token
  with
    value : Decimal
    minter : Party
    owner : Party
  where
    signatory minter
    observer owner
    ensure value > 0.0 && owner /= minter

template LoanLimit
  with
    amount : Decimal
    bank : Party
  where
    signatory bank
    ensure amount >= 0.0
    key bank : Party
    maintainer key

template Loan
  with
    bank : Party
    borrower : Party
    approvedAmount : Decimal
    disbursementTotal : [Token]
  where
    signatory bank, borrower
    ensure approvedAmount > 0.0 && bank /= borrower && tokenValue disbursementTotal <= approvedAmount

    choice Disburse : (ContractId Token, ContractId Loan)
      with
        amount : Decimal
        actor : Party
      controller actor
      do
        assertMsg "Actor must be either be the borrower or the bank" (actor `elem` [borrower, bank])
        assertMsg "Must disburse more than zero" (amount > 0.0)
        assertMsg "Cannot disburse more than approved amount" (amount <= approvedAmount)

        let existingDisbursementTotal = tokenValue disbursementTotal
        let newDisbursementTotal = amount + existingDisbursementTotal

        assertMsg "Total disbursement amount cannot be more than approved amount" (newDisbursementTotal <= approvedAmount)

        let disbursement = 
              Token with value = amount; owner = borrower; minter = bank
        newDisbursementCid <- create disbursement
        newLoanCid <- create this with disbursementTotal = disbursement :: disbursementTotal

        pure (newDisbursementCid, newLoanCid)
    
template LoanRequest
  with
    bank : Party
    borrower : Party
    amount : Decimal
  where
    signatory borrower
    observer bank
    ensure amount > 0.0 && bank /= borrower

    choice ApproveRequest : ContractId Loan
      controller bank
      do
        (loanLimitCid, loanLimit) <- fetchByKey @LoanLimit bank
        
        assertMsg "Cannot loan more than loan limit" (amount <= loanLimit.amount)

        let newLimit = loanLimit.amount - amount
        archive loanLimitCid
        create LoanLimit with amount = newLimit, ..

        create Loan with disbursementTotal = []; approvedAmount = amount; ..
