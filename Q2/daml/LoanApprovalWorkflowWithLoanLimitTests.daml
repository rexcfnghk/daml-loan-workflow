module LoanApprovalWorkflowWithLoanLimitTests where

import LoanApprovalWorkflowWithLoanLimit
import DA.Assert
import DA.Functor
import DA.Optional
import Daml.Script

allocateParties : [Text] -> Script [Party]
allocateParties = mapA allocateParty

test_bankCanCreateALoanLimit : Script ()
test_bankCanCreateALoanLimit = do
  bank <- allocateParty "bank"
  let limit = 100.0
  
  limitCid <- bank `submit` createCmd LoanLimit with amount = limit; ..

  Some limit <- bank `queryContractId` limitCid

  100.0 === limit.amount

test_BorrowerCanCreateLoanRequest : Script ()
test_BorrowerCanCreateLoanRequest = do
  let amount = 100.0
  [borrower, bank] <- allocateParties ["borrower", "bank"]

  void $ borrower `submit` createCmd LoanRequest with ..

test_BorrowerCannotCreateLoanRequestWithBankFieldEqualsToBorrower : Script ()
test_BorrowerCannotCreateLoanRequestWithBankFieldEqualsToBorrower = do
  let amount = 100.0
  borrower <- allocateParty "borrower"

  void $ borrower `submitMustFail` createCmd LoanRequest with bank = borrower; borrower; ..

test_BankCanApproveLoanRequest : Script ()
test_BankCanApproveLoanRequest = do
  [borrower, bank] <- allocateParties ["borrower", "bank"]
  let limit = 100.0
  
  void $ bank `submit` createCmd LoanLimit with amount = limit; ..

  let amount = 100.0

  loanRequestCid <- borrower `submit` createCmd LoanRequest with ..

  void $ bank `submit` exerciseCmd loanRequestCid ApproveRequest

test_BankCanFetchApproveedLoanWithExpectedAmount : Script ()
test_BankCanFetchApproveedLoanWithExpectedAmount = do
  let expected = 100.0
  [borrower, bank] <- allocateParties ["borrower", "bank"]

  let limit = 100.0
  
  void $ bank `submit` createCmd LoanLimit with amount = limit; ..

  loanRequest <- borrower `submit` createCmd LoanRequest with amount = expected; ..

  loanCid <- bank `submit` exerciseCmd loanRequest ApproveRequest

  Some loan <- bank `queryContractId` loanCid

  expected === loan.approvedAmount

test_LoanRequestArchivedAfterApproval : Script ()
test_LoanRequestArchivedAfterApproval = do
  let amount = 100.0
  [borrower, bank] <- allocateParties ["borrower", "bank"]

  let limit = 100.0
  
  void $ bank `submit` createCmd LoanLimit with amount = limit; ..

  loanRequest <- borrower `submit` createCmd LoanRequest with ..

  void $ bank `submit` exerciseCmd loanRequest ApproveRequest

  loanRequests <- query @LoanRequest borrower

  [] === loanRequests

test_ApprovedLoanHasExpectedBorrowerAndBank : Script ()
test_ApprovedLoanHasExpectedBorrowerAndBank = do
  let amount = 100.0
  [borrower, bank] <- allocateParties ["borrower", "bank"]

  let limit = 100.0
  
  void $ bank `submit` createCmd LoanLimit with amount = limit; ..

  loanRequest <- borrower `submit` createCmd LoanRequest with ..

  loanContractId <- bank `submit` exerciseCmd loanRequest ApproveRequest

  fromBanksPerspective <- bank `queryContractId` loanContractId
  assert $ isSome fromBanksPerspective

  fromBorrowersPerspective <- borrower `queryContractId` loanContractId
  assert $ isSome fromBorrowersPerspective

  fromBanksPerspective === fromBorrowersPerspective

  let (Some contract) = fromBanksPerspective
  bank === contract.bank
  borrower === contract.borrower

test_bankCanDisburseALoanWithDisburseAmountBelowApprovedAmount : Script ()
test_bankCanDisburseALoanWithDisburseAmountBelowApprovedAmount = do
  [ bank, borrower ] <- allocateParties [ "bank", "borrower" ]
  let limit = 100.0
  
  loanLimitCid <- bank `submit` createCmd LoanLimit with amount = limit; ..

  let borrowAmount = 90.0
  loanRequestCid <- 
    borrower `submit` createCmd LoanRequest with amount = borrowAmount; ..
  
  loanCid <- bank `submit` exerciseCmd loanRequestCid ApproveRequest

  let disbursement = 20.0
  (tokenCid, loanCid) <- bank `submit` exerciseCmd loanCid Disburse with amount = disbursement; actor = bank

  Some loan <- bank `queryContractId` loanCid
  20.0 === tokenValue loan.disbursements
  Some token <- bank `queryContractId` tokenCid
  20.0 === token.value

test_bankCantDisburseALoanWithDisburseAmountAboveApprovedAmount : Script ()
test_bankCantDisburseALoanWithDisburseAmountAboveApprovedAmount = do
  [ bank, borrower ] <- allocateParties [ "bank", "borrower" ]
  let limit = 100.0
  
  loanLimitCid <- bank `submit` createCmd LoanLimit with amount = limit; ..

  let borrowAmount = 90.0
  loanRequestCid <- 
    borrower `submit` createCmd LoanRequest with amount = borrowAmount; ..
  
  loanCid <- bank `submit` exerciseCmd loanRequestCid ApproveRequest

  let disbursement = 99.0
  void $ bank `submitMustFail` exerciseCmd loanCid Disburse with amount = disbursement; actor = bank

test_borrowerCanDisburseALoanWithDisburseAmountBelowApprovedAmount : Script ()
test_borrowerCanDisburseALoanWithDisburseAmountBelowApprovedAmount = do
  [ bank, borrower ] <- allocateParties [ "bank", "borrower" ]
  let limit = 100.0
  
  loanLimitCid <- bank `submit` createCmd LoanLimit with amount = limit; ..

  let borrowAmount = 90.0
  loanRequestCid <- 
    borrower `submit` createCmd LoanRequest with amount = borrowAmount; ..
  
  loanCid <- bank `submit` exerciseCmd loanRequestCid ApproveRequest

  let disbursement = 20.0
  (tokenCid, loanCid) <- borrower `submit` exerciseCmd loanCid Disburse with amount = disbursement; actor = borrower

  Some loan <- bank `queryContractId` loanCid
  20.0 === tokenValue loan.disbursements
  Some token <- bank `queryContractId` tokenCid
  20.0 === token.value

test_borrowerCantDisburseALoanWithDisburseAmountAboveApprovedAmount : Script ()
test_borrowerCantDisburseALoanWithDisburseAmountAboveApprovedAmount = do
  [ bank, borrower ] <- allocateParties [ "bank", "borrower" ]
  let limit = 100.0
  
  loanLimitCid <- bank `submit` createCmd LoanLimit with amount = limit; ..

  let borrowAmount = 90.0
  loanRequestCid <- 
    borrower `submit` createCmd LoanRequest with amount = borrowAmount; ..
  
  loanCid <- bank `submit` exerciseCmd loanRequestCid ApproveRequest

  let disbursement = 99.0
  void $ borrower `submitMustFail` exerciseCmd loanCid Disburse with amount = disbursement; actor = borrower
  