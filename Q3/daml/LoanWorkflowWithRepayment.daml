module LoanWorkflowWithRepayment where

import DA.Action
import DA.Foldable as F
import DA.List as L
import DA.Map as M
import DA.Map.Extra as ME
import DA.Traversable as T
import DA.Tuple as TU

-- Helper function to calculate the total of tokens, ignoring signs
tokenValue : [Token] -> Decimal
tokenValue = F.sum . fmap (.value)

-- Helper function to calculate the tokens required to repay a specified amount
getTokensForRepayment : Decimal -> Map (ContractId Token) Token -> Map (ContractId Token) Token
getTokensForRepayment repaymentAmount tokenMap =
  let (greaterThanOrEqualToRepaymentAmount, lessThanRepaymentAmount) = 
        ME.partition ((>= repaymentAmount) . (.value)) tokenMap
  in
    if not $ M.null greaterThanOrEqualToRepaymentAmount
    then ME.head greaterThanOrEqualToRepaymentAmount
    else
        let folder k v (out, acc) = 
              if acc - v.value >= 0.0
              then (M.insert k v out , acc - v.value)
              else (out, 0.0)
        in  fst $ ME.foldrWithKey folder (M.empty, repaymentAmount) lessThanRepaymentAmount

-- Helper function to fetch all Token contracts from a list of ContractIds
-- and form a Map of ContractId a to a
getDisbursementMap : HasFetch a => [ContractId a] -> Update (Map (ContractId a) a)
getDisbursementMap contractIds =
  M.fromList <$> T.mapA (T.mapA fetch) dupes
    where dupes = fmap TU.dupe contractIds

-- Since repayment amount might be greater than the total disbursed token value
-- This function will pontentially return a token with the change
createTokenForChange : Party -> Party -> Decimal -> [Token] -> Optional Token
createTokenForChange minter owner repayment tokens =
  if totalTokenValue <= repayment
  then None
  else Some $ Token with value = totalTokenValue - repayment; ..
    where totalTokenValue = tokenValue tokens

-- Only add to disbursements when there is a change
addChangeToDisbursements : Optional a -> [a] -> [a]
addChangeToDisbursements (Some cid) = (cid ::)
addChangeToDisbursements None = identity

updateLoanLimit : Party -> Decimal -> Update ()
updateLoanLimit bank paidOffLoanAmount = do
  (loanLimitCid, loanLimit) <- fetchByKey @LoanLimit bank

  let newLimit = LoanLimit with amount = loanLimit.amount + paidOffLoanAmount; ..
  archive loanLimitCid
  void $ create newLimit

data RepaymentResult =
    LoanPaidOff
  | Accepted with newLoanCid : ContractId Loan; change : Optional (ContractId Token)
  deriving (Eq, Show)

template Token
  with
    value : Decimal
    minter : Party
    owner : Party
  where
    signatory minter
    observer owner
    ensure value > 0.0

template LoanLimit
  with
    amount : Decimal
    bank : Party
  where
    signatory bank
    ensure amount >= 0.0
    key bank : Party
    maintainer key

template RepaymentRestriction
  with
    minimumAmount : Decimal
    bank : Party
    borrower : Party
    loanId : Text
  where
    signatory bank, borrower
    ensure minimumAmount > 0.0 && bank /= borrower
    key (bank, borrower, loanId) : (Party, Party, Text)
    maintainer key._1

template Loan
  with
    id : Text
    bank : Party
    borrower : Party
    approvedAmount : Decimal
    repaidAmount : Decimal
    disbursementCids : [ContractId Token]
  where
    signatory bank, borrower
    key (bank, borrower, id) : (Party, Party, Text)
    maintainer key._1
    ensure approvedAmount > 0.0 && repaidAmount >= 0.0 && bank /= borrower

    choice Disburse : (ContractId Token, ContractId Loan)
      with
        amount : Decimal
        actor : Party
      controller actor
      do
        assertMsg "Actor must be either be the borrower or the bank" (actor `L.elem` [borrower, bank])
        assertMsg "Must disburse more than zero" (amount > 0.0)
        assertMsg "Cannot disburse more than approved amount" (amount <= approvedAmount)

        existingDisbursements <- getDisbursementMap disbursementCids

        let existingDisbursementTotal = tokenValue $ values existingDisbursements
            newDisbursementTotal = amount + existingDisbursementTotal

        assertMsg "Total disbursement amount cannot be more than approved amount" (newDisbursementTotal <= approvedAmount)

        let disbursement = 
              Token with value = amount; owner = borrower; minter = bank
        newDisbursementCid <- create disbursement
        newLoanCid <- create this with disbursementCids = newDisbursementCid :: keys existingDisbursements

        pure (newDisbursementCid, newLoanCid)

    choice Repay : RepaymentResult
      with
        loanId : Text
        amount : Decimal
      controller borrower, bank
      do
        assertMsg "Repayment amount must be greater than zero" (amount > 0.0)

        (repaymentRestrictionCid, repaymentRestriction) <- fetchByKey @RepaymentRestriction (bank, borrower, loanId)
        assertMsg "Repayment amount must be greater than minimum amount specified in repayment restriction" (amount >= repaymentRestriction.minimumAmount)

        existingDisbursements <- getDisbursementMap disbursementCids

        let existingTokenValue = tokenValue $ values existingDisbursements

        assertMsg "Existing token value must be greater than or equal to repayment amount" (existingTokenValue >= amount)

        let newRepaidAmount = repaidAmount + amount
            canCloseLoan = newRepaidAmount >= approvedAmount

        if canCloseLoan
        then do
          mapA_ archive disbursementCids

          archive repaymentRestrictionCid

          updateLoanLimit bank approvedAmount

          pure LoanPaidOff

        else do
          let repaymentTokens = getTokensForRepayment amount existingDisbursements
              changeOpt = createTokenForChange bank borrower amount (values repaymentTokens)
          changeCidOpt <- T.mapA create changeOpt

          let newDisbursementCids = 
                addChangeToDisbursements changeCidOpt $ disbursementCids \\ keys repaymentTokens

          mapA_ archive $ keys repaymentTokens
          
          newLoanCid <- 
            create this with repaidAmount = newRepaidAmount; disbursementCids = newDisbursementCids 
          
          pure $ Accepted with change = changeCidOpt; ..

template LoanRequest
  with
    bank : Party
    borrower : Party
    amount : Decimal
  where
    signatory borrower
    observer bank
    ensure amount > 0.0 && bank /= borrower

    choice ApproveRequest : ContractId Loan
      with
        loanId : Text
        minimumRepaymentAmount : Decimal
      controller bank
      do
        assertMsg "Minimum repayment amount must be less than or equal to loan amount" (minimumRepaymentAmount <= amount)

        (loanLimitCid, loanLimit) <- fetchByKey @LoanLimit bank
        
        assertMsg "Cannot loan more than loan limit" (amount <= loanLimit.amount)

        let newLimit = loanLimit.amount - amount
        archive loanLimitCid
        create LoanLimit with amount = newLimit, ..

        loanCid <- 
          create Loan with 
            id = loanId
            disbursementCids = []
            approvedAmount = amount
            repaidAmount = 0.0; ..

        void $ create RepaymentRestriction with minimumAmount = minimumRepaymentAmount; ..

        pure loanCid
